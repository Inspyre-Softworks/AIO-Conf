name: Publish to PyPI / TestPyPI
on:
  push:
    tags: ['v*', '[0-9]*']
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.decide.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.x' }
      - run: python -m pip install --upgrade build packaging
      - run: python -m build
      - id: decide
        run: |
          python - <<'PY'
          import os
          from packaging.version import Version, InvalidVersion
          tag = os.environ.get('GITHUB_REF_NAME','')
          v = tag[1:] if tag.startswith('v') else tag
          try:
              pre = Version(v).is_prerelease or Version(v).is_devrelease
          except InvalidVersion:
              pre = True
          with open(os.environ['GITHUB_OUTPUT'],'a') as f:
              f.write(f"is_prerelease={'true' if pre else 'false'}\n")
          PY
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish_prerelease_testpypi:
    needs: build
    if: ${{ needs.build.outputs.is_prerelease == 'true' }}
    runs-on: ubuntu-latest
    permissions: { contents: read, id-token: write }
    steps:
      - uses: actions/download-artifact@v4
        with: { name: dist, path: dist/ }
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish_stable_pypi:
    needs: build
    if: ${{ needs.build.outputs.is_prerelease != 'true' }}
    runs-on: ubuntu-latest
    permissions: { contents: read, id-token: write }
    steps:
      - uses: actions/download-artifact@v4
        with: { name: dist, path: dist/ }
      - uses: pypa/gh-action-pypi-publish@release/v1

  release_github:
    name: Create GitHub Release + upload dist/*
    needs: [build, publish_prerelease_testpypi, publish_stable_pypi]
    if: ${{ always() && needs.build.result == 'success' && (needs.publish_prerelease_testpypi.result == 'success' || needs.publish_stable_pypi.result == 'success') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write   # required to create the Release and upload assets
    steps:
      - uses: actions/download-artifact@v4
        with: { name: dist, path: dist/ }

      # Create release and attach artifacts; mark prereleases accordingly.
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          prerelease: ${{ needs.build.outputs.is_prerelease == 'true' }}
          files: |
            dist/*
